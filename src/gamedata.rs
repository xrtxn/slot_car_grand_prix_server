use axum::Json;

use crate::request_structs::RequestRoot;
use crate::response_structs::{
    ApiResponse, Data, HighScoreResponseData, PersonalBestResponseData, PostScoreResponseData,
    Response, ResponseData, ResponseRoot,
};
use crate::server_verification::compress_string;

pub async fn getmyscore(Json(payload): Json<RequestRoot>) -> Json<ResponseRoot> {
    println!("{:?}", payload);
    let resp = ApiResponse::PersonalBestResponse(PersonalBestResponseData {
        user_name: "GetPersonalBest".to_string(),
        opt_login_id: -1,
        track_id: 0,
        place: 69,
        my_best_time: 26378,
        game_data: compress_string("1,0,2,2000000111111111111111111111111111111111110000000000000011111111110000000001111111111111111111111111111111111111111111110000000000000111111111000011111111111111111111111111111111111111111100000000011111100001111110000111111111111111111111111111000000000000000011110000000001110001111111111111111111111100000000000111111111111111111000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000011111111000000000111110011110000001111111111111111111111111111111111111111100000000000111111111111111111111111111111111111111100000000000111111111100000000000111111111111111111111111111111111000000000000000000011111111111111111111111111111111111110000000000000000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111"),
        last_place: 100,
    });

    let l = ResponseRoot {
        response: Response {
            message: None,
            response_data: ResponseData {
                data: Data { rows: vec![resp] },
            },
        },
    };
    return Json(l);
}

pub async fn gethighscore(Json(payload): Json<RequestRoot>) -> Json<ResponseRoot> {
    println!("{:?}", payload);
    let l = ResponseRoot {
        response: Response {
            message: None,
            response_data: ResponseData {
                data: Data {
                    rows: vec![ApiResponse::HighScoreResponse(HighScoreResponseData {
                        user_name: "HighScoreResponseData".to_string(),
                        score2: 25430,
                        track_id: 0,
                        rank: 1,
                        color: 1,
                        opt_login_id: -1,
                        game_data: compress_string("91,0,0,01000011111111111111111111111111111111111111000011100011111111111111111111111111111111111111111111111111111111100011111111111111111111111111111111111111111111110000000001111111111111111111111111110000000000000000011111111111111111111111111111111000011100000000000011111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000011100000000111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000111111111111111111111111111111100000000001111111111111111111111111111111111111111111111111111111111111111111000011111111111111111111111111111111111111111111111111111111111111111111111"),
                    }
                    ),
                       ApiResponse::HighScoreResponse(HighScoreResponseData {
                           user_name: "TopPlayer2".to_string(),
                           score2: 26378,
                           track_id: 0,
                           rank: 2,
                           color: 1,
                           opt_login_id: -1,
                           game_data: compress_string("1,0,2,2000000111111111111111111111111111111111110000000000000011111111110000000001111111111111111111111111111111111111111111110000000000000111111111000011111111111111111111111111111111111111111100000000011111100001111110000111111111111111111111111111000000000000000011110000000001110001111111111111111111111100000000000111111111111111111000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000011111111000000000111110011110000001111111111111111111111111111111111111111100000000000111111111111111111111111111111111111111100000000000111111111100000000000111111111111111111111111111111111000000000000000000011111111111111111111111111111111111110000000000000000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111"),
                       }
                       ),
                       ApiResponse::HighScoreResponse(HighScoreResponseData {
                           user_name: "HighScoreResponseData".to_string(),
                           score2: 26841,
                           track_id: 0,
                           rank: 3,
                           color: 1,
                           opt_login_id: -1,
                           game_data: compress_string
                       }
                       )
                    ]

                }
            },
        },
    };
    Json(l)
}

pub async fn postscore(Json(payload): Json<RequestRoot>) -> Json<ResponseRoot> {
    println!("{:?}", payload);
    let l = ResponseRoot {
        response: Response {
            message: None,
            response_data: ResponseData {
                data: Data {
                    rows: vec![ApiResponse::PostScoreResponse(PostScoreResponseData {
                        in_track_id: 0,
                        place: 11,
                        score2: 25430,
                    })],
                },
            },
        },
    };
    Json(l)
}
pub async fn getmatched(Json(payload): Json<RequestRoot>) -> Json<ResponseRoot> {
    println!("{:?}", payload);
    let l = ResponseRoot {
        response: Response {

            message: None,
            response_data: ResponseData {
                data: Data {
                    rows: vec![ApiResponse::PostScoreResponse(PostScoreResponseData {
                        in_track_id: 0,
                        place: 11,
                        score2: 25430,
                    })],
                },
            },
        },
    };
    Json(l)
}
